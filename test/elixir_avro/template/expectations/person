defmodule Prefix.Atp.Players.Info.Person do
  @moduledoc """
  DO NOT EDIT MANUALLY: This module was automatically generated from an AVRO schema.

  ### Description


  ### Fields
  - __fullname__:
  - __age__:
  """

  use TypedStruct

  alias ElixirAvro.AvroType.Value.Decoder
  alias ElixirAvro.AvroType.Value.Encoder

  @expected_keys MapSet.new(["fullname", "age"])

  typedstruct do
    field(:fullname, String.t(), enforce: true)
    field(:age, integer(), enforce: true)
  end

  @module_prefix Prefix

  def to_avro(%__MODULE__{} = struct) do
    {:ok,
     %{
       "fullname" =>
         Encoder.encode_value!(
           struct.fullname,
           %ElixirAvro.AvroType.Primitive{name: "string", custom_props: []},
           @module_prefix
         ),
       "age" =>
         Encoder.encode_value!(
           struct.age,
           %ElixirAvro.AvroType.Primitive{name: "int", custom_props: []},
           @module_prefix
         )
     }}
  end

  def from_avro(%{"fullname" => fullname, "age" => age}) do
    {:ok,
     %__MODULE__{
       fullname:
         Decoder.decode_value!(
           fullname,
           %ElixirAvro.AvroType.Primitive{name: "string", custom_props: []},
           @module_prefix
         ),
       age:
         Decoder.decode_value!(
           age,
           %ElixirAvro.AvroType.Primitive{name: "int", custom_props: []},
           @module_prefix
         )
     }}
  rescue
    e -> {:error, inspect(e)}
  end

  def from_avro(%{} = invalid) do
    actual = invalid |> Map.keys() |> MapSet.new()
    missing = @expected_keys |> MapSet.difference(actual) |> Enum.join(", ")
    {:error, "Missing keys: " <> missing}
  end

  def from_avro(_) do
    {:error, "Expected a map"}
  end
end
