defmodule My.Fantastic.App.Atp.Players.Info.Person do
  @moduledoc """
  DO NOT EDIT MANUALLY: This module was automatically generated from an AVRO schema.



  Fields:

    `fullname`:

    `age`:

  """

  use TypedStruct

  @expected_keys MapSet.new(["fullname", "age"])

  typedstruct do
    field :fullname, String.t(), enforce: true
    field :age, integer(), enforce: true
  end

  def to_avro_map(%__MODULE__{} = r) do
    {:ok,
     %{
       "fullname" =>
         ElixirAvro.Generator.Types.encode_value!(r.fullname, {:avro_primitive_type, "string", []}, My.Fantastic.App),
       "age" => ElixirAvro.Generator.Types.encode_value!(r.age, {:avro_primitive_type, "int", []}, My.Fantastic.App)
     }}
  end

  def from_avro(%{
        "fullname" => fullname,
        "age" => age
      }) do
    {:ok,
     %__MODULE__{
       fullname:
         ElixirAvro.Generator.Types.decode_value!(fullname, {:avro_primitive_type, "string", []}, My.Fantastic.App),
       age: ElixirAvro.Generator.Types.decode_value!(age, {:avro_primitive_type, "int", []}, My.Fantastic.App)
     }}
  rescue
    e -> {:error, inspect(e)}
  end

  def from_avro(%{} = invalid) do
    actual = Map.keys(invalid) |> MapSet.new()
    missing = MapSet.difference(@expected_keys, actual) |> Enum.join(", ")
    {:error, "Missing keys: " <> missing}
  end

  def from_avro(_) do
    {:error, "Expected a map"}
  end
end
