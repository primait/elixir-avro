defmodule My.Fantastic.App.Atp.Players.Info.BirthInfo do
  @moduledoc """
  DO NOT EDIT MANUALLY: This module was automatically generated from an AVRO schema.

  Info about a player's birth.

  Fields:

    `birthday`:

    `father`: Father's info.

  """

  use TypedStruct

  @expected_keys MapSet.new(["birthday", "father"])

  typedstruct do
    field :birthday, Date.t(), enforce: true
    field :father, My.Fantastic.App.Atp.Players.Info.Person.t(), enforce: true
  end

  def to_avro_map(%__MODULE__{} = r) do
    {:ok,
     %{
       "birthday" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.birthday,
           {:avro_primitive_type, "int", [{"logicalType", "date"}]},
           My.Fantastic.App
         ),
       "father" => ElixirAvro.Generator.Types.encode_value!(r.father, "atp.players.info.Person", My.Fantastic.App)
     }}
  end

  def from_avro(%{
        "birthday" => birthday,
        "father" => father
      }) do
    {:ok,
     %__MODULE__{
       birthday:
         ElixirAvro.Generator.Types.decode_value!(
           birthday,
           {:avro_primitive_type, "int", [{"logicalType", "date"}]},
           My.Fantastic.App
         ),
       father: ElixirAvro.Generator.Types.decode_value!(father, "atp.players.info.Person", My.Fantastic.App)
     }}
  rescue
    e -> {:error, inspect(e)}
  end

  def from_avro(%{} = invalid) do
    actual = Map.keys(invalid) |> MapSet.new()
    missing = MapSet.difference(@expected_keys, actual) |> Enum.join(", ")
    {:error, "Missing keys: " <> missing}
  end

  def from_avro(_) do
    {:error, "Expected a map"}
  end
end
