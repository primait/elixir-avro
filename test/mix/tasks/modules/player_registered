defmodule MyApp.AvroGenerated.Atp.Players.PlayerRegistered do
  @moduledoc """
  DO NOT EDIT MANUALLY: This module was automatically generated from an AVRO schema.

  A new player is registered in the atp ranking system.

  Fields:

    `player_id`: The unique identifier of the registered player (UUID).

    `full_name`: The full name of the registered player.

    `rank`: The current ranking of the registered player, start counting from 1.

    `registration_date`: The date when the player was registered (number of UTC days
      from the unix epoch).

    `sponsor_name`: The name of the current sponsor (optional).

    `trainer`: Current trainer.

    `assistant`: The assistant he is assisted by.

  """

  use TypedStruct

  @expected_keys MapSet.new([
                   "player_id",
                   "full_name",
                   "rank",
                   "registration_date",
                   "sponsor_name",
                   "trainer",
                   "assistant"
                 ])

  typedstruct do
    field :player_id, String.t(), enforce: true
    field :full_name, String.t(), enforce: true
    field :rank, integer(), enforce: true
    field :registration_date, Date.t(), enforce: true
    field :sponsor_name, nil | String.t(), enforce: false
    field :trainer, MyApp.AvroGenerated.Atp.Players.Trainer.t(), enforce: true
    field :assistant, MyApp.AvroGenerated.Atp.Players.Assistant.t(), enforce: true
  end

  def to_avro(%__MODULE__{} = r) do
    {:ok,
     %{
       "player_id" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.player_id,
           {:avro_primitive_type, "string", [{"logicalType", "uuid"}]},
           MyApp.AvroGenerated
         ),
       "full_name" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.full_name,
           {:avro_primitive_type, "string", []},
           MyApp.AvroGenerated
         ),
       "rank" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.rank,
           {:avro_primitive_type, "int", []},
           MyApp.AvroGenerated
         ),
       "registration_date" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.registration_date,
           {:avro_primitive_type, "int", [{"logicalType", "date"}]},
           MyApp.AvroGenerated
         ),
       "sponsor_name" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.sponsor_name,
           {:avro_union_type,
            {2,
             {1, {:avro_primitive_type, "string", []},
              {0, {:avro_primitive_type, "null", []}, nil, nil}, nil}},
            {2, {"string", {1, true}, {"null", {0, true}, nil, nil}, nil}}},
           MyApp.AvroGenerated
         ),
       "trainer" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.trainer,
           "atp.players.Trainer",
           MyApp.AvroGenerated
         ),
       "assistant" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.assistant,
           "atp.players.Assistant",
           MyApp.AvroGenerated
         )
     }}
  end

  def from_avro(%{
        "player_id" => player_id,
        "full_name" => full_name,
        "rank" => rank,
        "registration_date" => registration_date,
        "sponsor_name" => sponsor_name,
        "trainer" => trainer,
        "assistant" => assistant
      }) do
    {:ok,
     %__MODULE__{
       player_id:
         ElixirAvro.Generator.Types.decode_value!(
           player_id,
           {:avro_primitive_type, "string", [{"logicalType", "uuid"}]},
           MyApp.AvroGenerated
         ),
       full_name:
         ElixirAvro.Generator.Types.decode_value!(
           full_name,
           {:avro_primitive_type, "string", []},
           MyApp.AvroGenerated
         ),
       rank:
         ElixirAvro.Generator.Types.decode_value!(
           rank,
           {:avro_primitive_type, "int", []},
           MyApp.AvroGenerated
         ),
       registration_date:
         ElixirAvro.Generator.Types.decode_value!(
           registration_date,
           {:avro_primitive_type, "int", [{"logicalType", "date"}]},
           MyApp.AvroGenerated
         ),
       sponsor_name:
         ElixirAvro.Generator.Types.decode_value!(
           sponsor_name,
           {:avro_union_type,
            {2,
             {1, {:avro_primitive_type, "string", []},
              {0, {:avro_primitive_type, "null", []}, nil, nil}, nil}},
            {2, {"string", {1, true}, {"null", {0, true}, nil, nil}, nil}}},
           MyApp.AvroGenerated
         ),
       trainer:
         ElixirAvro.Generator.Types.decode_value!(
           trainer,
           "atp.players.Trainer",
           MyApp.AvroGenerated
         ),
       assistant:
         ElixirAvro.Generator.Types.decode_value!(
           assistant,
           "atp.players.Assistant",
           MyApp.AvroGenerated
         )
     }}
  rescue
    e -> {:error, inspect(e)}
  end

  def from_avro(%{} = invalid) do
    actual = Map.keys(invalid) |> MapSet.new()
    missing = MapSet.difference(@expected_keys, actual) |> Enum.join(", ")
    {:error, "Missing keys: " <> missing}
  end

  def from_avro(_) do
    {:error, "Expected a map"}
  end
end
