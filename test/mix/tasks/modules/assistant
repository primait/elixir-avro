defmodule MyApp.AvroGenerated.Atp.Players.Assistant do
  @moduledoc """
  DO NOT EDIT MANUALLY: This module was automatically generated from an AVRO schema.

  ### Description
  A trainer assistant that trains a set of registered players.

  ### Fields
  - __assistant_id__: The unique identifier of the assistant (UUID).
  - __trainer__: The trainer he refers to.
  - __players__: The registered players he assists.
  """

  use TypedStruct

  alias ElixirAvro.AvroType.Value.Decoder
  alias ElixirAvro.AvroType.Value.Encoder

  @expected_keys MapSet.new(["assistant_id", "trainer", "players"])

  typedstruct do
    field :assistant_id, String.t(), enforce: true
    field :trainer, MyApp.AvroGenerated.Atp.Players.Trainer.t(), enforce: true
    field :players, [MyApp.AvroGenerated.Atp.Players.PlayerRegistered.t()], enforce: true
  end

  @module_prefix MyApp.AvroGenerated

  def to_avro(%__MODULE__{} = struct) do
    {:ok,
     %{
       "assistant_id" =>
         Encoder.encode_value!(
           struct.assistant_id,
           %ElixirAvro.AvroType.Primitive{
             name: "string",
             custom_props: [%ElixirAvro.AvroType.CustomProp{name: "logicalType", value: "uuid"}]
           },
           @module_prefix
         ),
       "trainer" => Encoder.encode_value!(struct.trainer, "atp.players.Trainer", @module_prefix),
       "players" =>
         Encoder.encode_value!(
           struct.players,
           %ElixirAvro.AvroType.Array{type: "atp.players.PlayerRegistered", custom_props: []},
           @module_prefix
         )
     }}
  end

  def from_avro(%{"assistant_id" => assistant_id, "trainer" => trainer, "players" => players}) do
    {:ok,
     %__MODULE__{
       assistant_id:
         Decoder.decode_value!(
           assistant_id,
           %ElixirAvro.AvroType.Primitive{
             name: "string",
             custom_props: [%ElixirAvro.AvroType.CustomProp{name: "logicalType", value: "uuid"}]
           },
           @module_prefix
         ),
       trainer: Decoder.decode_value!(trainer, "atp.players.Trainer", @module_prefix),
       players:
         Decoder.decode_value!(
           players,
           %ElixirAvro.AvroType.Array{type: "atp.players.PlayerRegistered", custom_props: []},
           @module_prefix
         )
     }}
  rescue
    e -> {:error, inspect(e)}
  end

  def from_avro(%{} = invalid) do
    actual = invalid |> Map.keys() |> MapSet.new()
    missing = @expected_keys |> MapSet.difference(actual) |> Enum.join(", ")
    {:error, "Missing keys: " <> missing}
  end

  def from_avro(_) do
    {:error, "Expected a map"}
  end
end
