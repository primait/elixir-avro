defmodule MyApp.AvroGenerated.Atp.Players.Assistant do
  @moduledoc """
  DO NOT EDIT MANUALLY: This module was automatically generated from an AVRO schema.

  A trainer assistant that trains a set of registered players.

  Fields:

    `assistant_id`: The unique identifier of the assistant (UUID).

    `trainer`: The trainer he refers to.

    `players`: The registered players he assist.

  """

  use TypedStruct

  @expected_keys MapSet.new(["assistant_id", "trainer", "players"])

  typedstruct do
    field :assistant_id, String.t(), enforce: true
    field :trainer, MyApp.AvroGenerated.Atp.Players.Trainer.t(), enforce: true
    field :players, [MyApp.AvroGenerated.Atp.Players.PlayerRegistered.t()], enforce: true
  end

  def to_avro(%__MODULE__{} = r) do
    {:ok,
     %{
       "assistant_id" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.assistant_id,
           {:avro_primitive_type, "string", [{"logicalType", "uuid"}]},
           MyApp.AvroGenerated
         ),
       "trainer" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.trainer,
           "atp.players.Trainer",
           MyApp.AvroGenerated
         ),
       "players" =>
         ElixirAvro.Generator.Types.encode_value!(
           r.players,
           {:avro_array_type, "atp.players.PlayerRegistered", []},
           MyApp.AvroGenerated
         )
     }}
  end

  def from_avro(%{
        "assistant_id" => assistant_id,
        "trainer" => trainer,
        "players" => players
      }) do
    {:ok,
     %__MODULE__{
       assistant_id:
         ElixirAvro.Generator.Types.decode_value!(
           assistant_id,
           {:avro_primitive_type, "string", [{"logicalType", "uuid"}]},
           MyApp.AvroGenerated
         ),
       trainer:
         ElixirAvro.Generator.Types.decode_value!(
           trainer,
           "atp.players.Trainer",
           MyApp.AvroGenerated
         ),
       players:
         ElixirAvro.Generator.Types.decode_value!(
           players,
           {:avro_array_type, "atp.players.PlayerRegistered", []},
           MyApp.AvroGenerated
         )
     }}
  rescue
    e -> {:error, inspect(e)}
  end

  def from_avro(%{} = invalid) do
    actual = Map.keys(invalid) |> MapSet.new()
    missing = MapSet.difference(@expected_keys, actual) |> Enum.join(", ")
    {:error, "Missing keys: " <> missing}
  end

  def from_avro(_) do
    {:error, "Expected a map"}
  end
end
